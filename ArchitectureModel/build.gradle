apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "config.gradle"
android {
    compileSdkVersion androidConfig.compileSdkVersion
    resourcePrefix "architecture"
    defaultConfig {
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName androidConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    // android support
    api "com.google.android.material:material:$dependencie.AndroidX"
    api "androidx.recyclerview:recyclerview:$dependencie.AndroidX"
    api "androidx.constraintlayout:constraintlayout:$dependencie.ConstraintLayout"
    // Architecture lifecycle
    api "androidx.lifecycle:lifecycle-extensions:$dependencie.Architecture"
    api "androidx.lifecycle:lifecycle-common-java8:$dependencie.Architecture"
//    // Okhttp
//    api "com.squareup.okhttp3:okhttp:$dependencie.OkHttp3"
//    api "com.squareup.okhttp3:logging-interceptor:$dependencie.OkHttp3"
//    api "com.squareup.okhttp3:okhttp-urlconnection:$dependencie.OkHttp3"
//    // retrofit
//    api "com.squareup.retrofit2:retrofit:$dependencie.Retrofit2"
//    api "com.squareup.retrofit2:converter-gson:$dependencie.Retrofit2"
//    api "com.squareup.retrofit2:adapter-rxjava2:$dependencie.Retrofit2"
    // rx
    api "io.reactivex.rxjava2:rxjava:$dependencie.RxJava2"
    api "io.reactivex.rxjava2:rxandroid:$dependencie.RxAndroid"
    // glide
    implementation "com.github.bumptech.glide:glide:$dependencie.Glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$dependencie.Glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$dependencie.Glide"
    // logger
    implementation "com.orhanobut:logger:$dependencie.logger"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

def siteUrl = "https://github.com/kailin2017/architecture_model.git"
def gitUrl = "https://github.com/kailin2017/architecture_model.git"
version = "0.0.1"
group = "com.kailin"
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name 'This is a album for Android.'
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers { 
                    developer {
                        id 'kailin'
                        name 'kailin'
                        email 'w22019532@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
bintray {
    user = "kailin2017"
    key = "4889d319ffe67dd44c8e9b84146621ff05f7f511"
    configurations = ['archives']
    pkg {
        repo = "architecture_model"
        name = "architecture_model"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}